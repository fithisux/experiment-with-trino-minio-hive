<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?><!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--><configuration>
  <!-- WARNING!!! This file is auto generated for documentation purposes ONLY! -->
  <!-- WARNING!!! Any changes you make to this file will be ignored by the metastore.   -->
  <!-- WARNING!!! You must make your changes in metastore-site.xml instead.         -->
  <!-- Metastore Execution Parameters -->
  <!--================================-->
  <!--All time unit values have a time unit abbreviation suffix-->
  <!--Any time value can take any of the units-->
  <!--d = day-->
  <!--h = hour-->
  <!--m = minute-->
  <!--s = second-->
  <!--ms = millisecond-->
  <!--us = microsecond-->
  <!--ns = nanosecond-->
  <!--================================-->
  <property>
    <name>metastore.added.jars.path</name>
    <value/>
    <description>This an internal parameter.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.clean.until</name>
    <value>0.8</value>
    <description>The cleaner thread cleans until cache reaches this % full size.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.enabled</name>
    <value>true</value>
    <description>Whether aggregate stats caching is enabled or not.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.fpp</name>
    <value>0.01</value>
    <description>Maximum false positive probability for the Bloom Filter used in each aggregate stats cache node (default 1%).</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.max.full</name>
    <value>0.9</value>
    <description>Maximum cache full % after which the cache cleaner thread kicks in.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.max.partitions</name>
    <value>10000</value>
    <description>Maximum number of partitions that are aggregated per cache node.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.max.reader.wait</name>
    <value>1000ms</value>
    <description>Number of milliseconds a reader will wait to acquire the readlock before giving up.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.max.variance</name>
    <value>0.01</value>
    <description>Maximum tolerable variance in number of partitions between a cached node and our request (default 1%).</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.max.writer.wait</name>
    <value>5000ms</value>
    <description>Number of milliseconds a writer will wait to acquire the writelock before giving up.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.size</name>
    <value>10000</value>
    <description>Maximum number of aggregate stats nodes that we will place in the metastore aggregate stats cache.</description>
  </property>
  <property>
    <name>metastore.aggregate.stats.cache.ttl</name>
    <value>600s</value>
    <description>Number of seconds for a cached node to be active in the cache before they become stale.</description>
  </property>
  <property>
    <name>metastore.alter.handler</name>
    <value>org.apache.hadoop.hive.metastore.HiveAlterHandler</value>
    <description>Alter handler.  For now defaults to the Hive one.  Really need a better default option</description>
  </property>
  <property>
    <name>metastore.async.log.enabled</name>
    <value>true</value>
    <description>
      Whether to enable Log4j2's asynchronous logging. Asynchronous logging can give
       significant performance improvement as logging will be handled in separate thread
       that uses LMAX disruptor queue for buffering log messages.
       Refer https://logging.apache.org/log4j/2.x/manual/async.html for benefits and
       drawbacks.
    </description>
  </property>
  <property>
    <name>metastore.authorization.storage.checks</name>
    <value>false</value>
    <description>
      Should the metastore do authorization checks against the underlying storage (usually hdfs) 
      for operations like drop-partition (disallow the drop-partition if the user in
      question doesn't have permissions to delete the corresponding directory
      on the storage).
    </description>
  </property>
  <property>
    <name>datanucleus.schema.autoCreateAll</name>
    <value>false</value>
    <description>Auto creates necessary schema on a startup if one doesn't exist. Set this to false, after creating it once.To enable auto create also set hive.metastore.schema.verification=false. Auto creation is not recommended for production use cases, run schematool command instead.</description>
  </property>
  <property>
    <name>metastore.batch.retrieve.max</name>
    <value>300</value>
    <description>
      Maximum number of objects (tables/partitions) can be retrieved from metastore in one batch. 
      The higher the number, the less the number of round trips is needed to the Hive metastore server, 
      but it may also cause higher memory requirement at the client side.
    </description>
  </property>
  <property>
    <name>metastore.batch.retrieve.table.partition.max</name>
    <value>1000</value>
    <description>Maximum number of objects that metastore internally retrieves in one batch.</description>
  </property>
  <property>
    <name>metastore.cache.pinobjtypes</name>
    <value>Table,StorageDescriptor,SerDeInfo,Partition,Database,Type,FieldSchema,Order</value>
    <description>List of comma separated metastore object types that should be pinned in the cache</description>
  </property>
  <property>
    <name>metastore.cached.rawstore.impl</name>
    <value>org.apache.hadoop.hive.metastore.ObjectStore</value>
    <description>Name of the wrapped RawStore class</description>
  </property>
  <property>
    <name>metastore.cached.rawstore.cache.update.frequency</name>
    <value>60s</value>
    <description>The time after which metastore cache is updated from metastore DB.</description>
  </property>
  <property>
    <name>metastore.cached.rawstore.cached.object.whitelist</name>
    <value>.*</value>
    <description>
      Comma separated list of regular expressions 
       to select the tables (and its partitions, stats etc) that will be cached by CachedStore. 
      This can be used in conjunction with hive.metastore.cached.rawstore.cached.object.blacklist. 
      Example: .*, db1.*, db2\.tbl.*. The last item can potentially override patterns specified before.
    </description>
  </property>
  <property>
    <name>metastore.cached.rawstore.cached.object.blacklist</name>
    <value/>
    <description>
      Comma separated list of regular expressions 
       to filter out the tables (and its partitions, stats etc) that will be cached by CachedStore. 
      This can be used in conjunction with hive.metastore.cached.rawstore.cached.object.whitelist. 
      Example: db2.*, db3\.tbl1, db3\..*. The last item can potentially override patterns specified before. 
      The blacklist also overrides the whitelist.
    </description>
  </property>
  <property>
    <name>metastore.cached.rawstore.max.cache.memory</name>
    <value>1Gb</value>
    <description>The maximum memory in bytes that the cached objects can use. Memory used is calculated based on estimated size of tables and partitions in the cache. Setting it to a negative value disables memory estimation.</description>
  </property>
  <property>
    <name>metastore.client.capability.check</name>
    <value>true</value>
    <description>Whether to check client capabilities for potentially breaking API usage.</description>
  </property>
  <property>
    <name>metastore.catalog.default</name>
    <value>hive</value>
    <description>The default catalog to use when a catalog is not specified.  Default is 'hive' (the default catalog).</description>
  </property>
  <property>
    <name>metastore.cached.rawstore.catalogs</name>
    <value>hive</value>
    <description>Comma separated list of catalogs to cache in the CachedStore. Default is 'hive' (the default catalog).  Empty string means all catalogs will be cached.</description>
  </property>
  <property>
    <name>metastore.client.connect.retry.delay</name>
    <value>1s</value>
    <description>Number of seconds for the client to wait between consecutive connection attempts</description>
  </property>
  <property>
    <name>metastore.client.kerberos.principal</name>
    <value/>
    <description>The Kerberos principal associated with the HA cluster of hcat_servers.</description>
  </property>
  <property>
    <name>metastore.client.socket.lifetime</name>
    <value>0s</value>
    <description>
      MetaStore Client socket lifetime in seconds. After this time is exceeded, client
      reconnects on the next MetaStore operation. A value of 0s means the connection
      has an infinite lifetime.
    </description>
  </property>
  <property>
    <name>metastore.client.socket.timeout</name>
    <value>600s</value>
    <description>MetaStore Client socket timeout in seconds</description>
  </property>
  <property>
    <name>metastore.compactor.history.reaper.interval</name>
    <value>2m</value>
    <description>Determines how often compaction history reaper runs</description>
  </property>
  <property>
    <name>metastore.compactor.history.retention.attempted</name>
    <value>2</value>
    <description>Determines how many attempted compaction records will be retained in compaction history for a given table/partition.</description>
  </property>
  <property>
    <name>metastore.compactor.history.retention.failed</name>
    <value>3</value>
    <description>Determines how many failed compaction records will be retained in compaction history for a given table/partition.</description>
  </property>
  <property>
    <name>metastore.compactor.history.retention.succeeded</name>
    <value>3</value>
    <description>Determines how many successful compaction records will be retained in compaction history for a given table/partition.</description>
  </property>
  <property>
    <name>metastore.compactor.initiator.failed.compacts.threshold</name>
    <value>2</value>
    <description>Number of consecutive compaction failures (per table/partition) after which automatic compactions will not be scheduled any more.  Note that this must be less than hive.compactor.history.retention.failed.</description>
  </property>
  <property>
    <name>metastore.compactor.initiator.on</name>
    <value>false</value>
    <description>
      Whether to run the initiator and cleaner threads on this metastore instance or not.
      Set this to true on one instance of the Thrift metastore service as part of turning
      on Hive transactions. For a complete list of parameters required for turning on
      transactions, see hive.txn.manager.
    </description>
  </property>
  <property>
    <name>metastore.compactor.worker.threads</name>
    <value>0</value>
    <description>
      How many compactor worker threads to run on this metastore instance. Set this to a
      positive number on one or more instances of the Thrift metastore service as part of
      turning on Hive transactions. For a complete list of parameters required for turning
      on transactions, see hive.txn.manager.
      Worker threads spawn MapReduce jobs to do compactions. They do not do the compactions
      themselves. Increasing the number of worker threads will decrease the time it takes
      tables or partitions to be compacted once they are determined to need compaction.
      It will also increase the background load on the Hadoop cluster as more MapReduce jobs
      will be running in the background.
    </description>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionDriverName</name>
    <value>com.mysql.cj.jdbc.Driver</value>
    <description>Driver class name for a JDBC metastore</description>
  </property>
  <property>
    <name>datanucleus.connectionPool.maxPoolSize</name>
    <value>10</value>
    <description>
      Specify the maximum number of connections in the connection pool. Note: The configured size will be used by
      2 connection pools (TxnHandler and ObjectStore). When configuring the max connection pool size, it is
      recommended to take into account the number of metastore instances and the number of HiveServer2 instances
      configured with embedded metastore. To get optimal performance, set config to meet the following condition
      (2 * pool_size * metastore_instances + 2 * pool_size * HS2_instances_with_embedded_metastore) = 
      (2 * physical_core_count + hard_disk_count).
    </description>
  </property>
  <property>
    <name>metastore.ds.connection.url.hook</name>
    <value/>
    <description>Name of the hook to use for retrieving the JDO connection URL. If empty, the value in javax.jdo.option.ConnectionURL is used</description>
  </property>
 <property>
    <name>javax.jdo.option.ConnectionURL</name>
    <value>jdbc:mysql://mariadbtest:3306/metastore_db</value>
    <description>
      JDBC connect string for a JDBC metastore.
      To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.
      For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.
    </description>
  </property>
  <property>
    <name>datanucleus.connectionPoolingType</name>
    <value>HikariCP</value>
    <description>Specify connection pool library for datanucleus</description>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionUserName</name>
    <value>admin</value>
    <description>Username to use against metastore database</description>
  </property>
  <property>
    <name>metastore.create.as.acid</name>
    <value>false</value>
    <description>
      Whether the eligible tables should be created as full ACID by default. Does 
      not apply to external tables, the ones using storage handlers, etc.
    </description>
  </property>
  <property>
    <name>metastore.count.open.txns.interval</name>
    <value>1s</value>
    <description>Time in seconds between checks to count open transactions.</description>
  </property>
  <property>
    <name>datanucleus.autoStartMechanismMode</name>
    <value>ignored</value>
    <description>Autostart mechanism for datanucleus.  Currently ignored is the only option supported.</description>
  </property>
  <property>
    <name>datanucleus.cache.level2</name>
    <value>false</value>
    <description>Use a level 2 cache. Turn this off if metadata is changed independently of Hive metastore server</description>
  </property>
  <property>
    <name>datanucleus.cache.level2.type</name>
    <value>none</value>
    <description/>
  </property>
  <property>
    <name>datanucleus.rdbms.initializeColumnInfo</name>
    <value>NONE</value>
    <description>initializeColumnInfo setting for DataNucleus; set to NONE at least on Postgres.</description>
  </property>
  <property>
    <name>datanucleus.plugin.pluginRegistryBundleCheck</name>
    <value>LOG</value>
    <description>Defines what happens when plugin bundles are found and are duplicated [EXCEPTION|LOG|NONE]</description>
  </property>
  <property>
    <name>datanucleus.transactionIsolation</name>
    <value>read-committed</value>
    <description>Default transaction isolation level for identity generation.</description>
  </property>
  <property>
    <name>datanucleus.rdbms.useLegacyNativeValueStrategy</name>
    <value>true</value>
    <description/>
  </property>
  <property>
    <name>metastore.dbaccess.ssl.properties</name>
    <value/>
    <description>
      Comma-separated SSL properties for metastore to access database when JDO connection URL
      enables SSL access. e.g. javax.net.ssl.trustStore=/tmp/truststore,javax.net.ssl.trustStorePassword=pwd.
    </description>
  </property>
  <property>
    <name>metastore.default.partition.name</name>
    <value>__HIVE_DEFAULT_PARTITION__</value>
    <description>
      The default partition name in case the dynamic partition column value is null/empty string or any other values that cannot be escaped. 
      This value must not contain any special character used in HDFS URI (e.g., ':', '%', '/' etc). 
      The user has to be aware that the dynamic partition value should not contain this value to avoid confusions.
    </description>
  </property>
  <property>
    <name>metastore.cluster.delegation.key.update-interval</name>
    <value>1d</value>
    <description/>
  </property>
  <property>
    <name>metastore.cluster.delegation.token.gc-interval</name>
    <value>1h</value>
    <description/>
  </property>
  <property>
    <name>metastore.cluster.delegation.token.max-lifetime</name>
    <value>7d</value>
    <description/>
  </property>
  <property>
    <name>metastore.cluster.delegation.token.renew-interval</name>
    <value>1d</value>
    <description/>
  </property>
  <property>
    <name>metastore.cluster.delegation.token.store.class</name>
    <value>org.apache.hadoop.hive.metastore.security.MetastoreDelegationTokenManager</value>
    <description>Class to store delegation tokens</description>
  </property>
  <property>
    <name>javax.jdo.option.DetachAllOnCommit</name>
    <value>true</value>
    <description>Detaches all objects from session so that they can be used after transaction is committed</description>
  </property>
  <property>
    <name>metastore.direct.sql.max.elements.in.clause</name>
    <value>1000</value>
    <description>
      The maximum number of values in a IN clause. Once exceeded, it will be broken into
       multiple OR separated IN clauses.
    </description>
  </property>
  <property>
    <name>metastore.direct.sql.max.elements.values.clause</name>
    <value>1000</value>
    <description>The maximum number of values in a VALUES clause for INSERT statement.</description>
  </property>
  <property>
    <name>metastore.direct.sql.max.query.length</name>
    <value>100</value>
    <description>
      The maximum
       size of a query string (in KB).
    </description>
  </property>
  <property>
    <name>metastore.direct.sql.batch.size</name>
    <value>0</value>
    <description>
      Batch size for partition and other object retrieval from the underlying DB in direct
      SQL. For some DBs like Oracle and MSSQL, there are hardcoded or perf-based limitations
      that necessitate this. For DBs that can handle the queries, this isn't necessary and
      may impede performance. -1 means no batching, 0 means automatic batching.
    </description>
  </property>
  <property>
    <name>metastore.disallow.incompatible.col.type.changes</name>
    <value>true</value>
    <description>
      If true, ALTER TABLE operations which change the type of a
      column (say STRING) to an incompatible type (say MAP) are disallowed.
      RCFile default SerDe (ColumnarSerDe) serializes the values in such a way that the
      datatypes can be converted from string to any type. The map is also serialized as
      a string, which can be read as a string as well. However, with any binary
      serialization, this is not true. Blocking the ALTER TABLE prevents ClassCastExceptions
      when subsequently trying to access old partitions.
      
      Primitive types like INT, STRING, BIGINT, etc., are compatible with each other and are
      not blocked.
      
      See HIVE-4409 for more details.
    </description>
  </property>
  <property>
    <name>metastore.dump.config.on.creation</name>
    <value>true</value>
    <description>If true, a printout of the config file (minus sensitive values) will be dumped to the log whenever newMetastoreConf() is called.  Can produce a lot of logs</description>
  </property>
  <property>
    <name>metastore.end.function.listeners</name>
    <value/>
    <description>List of comma separated listeners for the end of metastore functions.</description>
  </property>
  <property>
    <name>metastore.event.clean.freq</name>
    <value>0s</value>
    <description>Frequency at which timer task runs to purge expired events in metastore.</description>
  </property>
  <property>
    <name>metastore.event.expiry.duration</name>
    <value>0s</value>
    <description>Duration after which events expire from events table</description>
  </property>
  <property>
    <name>metastore.event.listeners</name>
    <value/>
    <description>A comma separated list of Java classes that implement the org.apache.riven.MetaStoreEventListener interface. The metastore event and corresponding listener method will be invoked in separate JDO transactions. Alternatively, configure hive.metastore.transactional.event.listeners to ensure both are invoked in same JDO transaction.</description>
  </property>
  <property>
    <name>metastore.event.message.factory</name>
    <value>org.apache.hadoop.hive.metastore.messaging.json.JSONMessageFactory</value>
    <description>Factory class for making encoding and decoding messages in the events generated.</description>
  </property>
  <property>
    <name>metastore.event.db.listener.timetolive</name>
    <value>86400s</value>
    <description>time after which events will be removed from the database listener queue</description>
  </property>
  <property>
    <name>metastore.metastore.event.db.notification.api.auth</name>
    <value>true</value>
    <description>
      Should metastore do authorization against database notification related APIs such as get_next_notification.
      If set to true, then only the superusers in proxy settings have the permission
    </description>
  </property>
  <property>
    <name>metastore.execute.setugi</name>
    <value>true</value>
    <description>
      In unsecure mode, setting this property to true will cause the metastore to execute DFS operations using 
      the client's reported user and group permissions. Note that this property must be set on 
      both the client and server sides. Further note that its best effort. 
      If client sets its to true and server sets it to false, client setting will be ignored.
    </description>
  </property>
  <property>
    <name>metastore.expression.proxy</name>
    <value>org.apache.hadoop.hive.ql.optimizer.ppr.PartitionExpressionForMetastore</value>
    <description>Class to use to process expressions in partition pruning.</description>
  </property>
  <property>
    <name>metastore.file.metadata.threads</name>
    <value>1</value>
    <description>Number of threads to use to read file metadata in background to cache it.</description>
  </property>
  <property>
    <name>metastore.filter.hook</name>
    <value>org.apache.hadoop.hive.metastore.DefaultMetaStoreFilterHookImpl</value>
    <description>Metastore hook class for filtering the metadata read results. If hive.security.authorization.manageris set to instance of HiveAuthorizerFactory, then this value is ignored.</description>
  </property>
  <property>
    <name>metastore.fs.handler.class</name>
    <value>org.apache.hadoop.hive.metastore.HiveMetaStoreFsImpl</value>
    <description/>
  </property>
  <property>
    <name>metastore.fshandler.threads</name>
    <value>15</value>
    <description>Number of threads to be allocated for metastore handler for fs operations.</description>
  </property>
  <property>
    <name>metastore.hmshandler.retry.attempts</name>
    <value>10</value>
    <description>The number of times to retry a HMSHandler call if there were a connection error.</description>
  </property>
  <property>
    <name>metastore.hmshandler.force.reload.conf</name>
    <value>false</value>
    <description>
      Whether to force reloading of the HMSHandler configuration (including
      the connection URL, before the next metastore query that accesses the
      datastore. Once reloaded, this value is reset to false. Used for
      testing only.
    </description>
  </property>
  <property>
    <name>metastore.hmshandler.retry.interval</name>
    <value>2000ms</value>
    <description>The time between HMSHandler retry attempts on failure.</description>
  </property>
  <property>
    <name>datanucleus.identifierFactory</name>
    <value>datanucleus1</value>
    <description>
      Name of the identifier factory to use when generating table/column names etc. 
      'datanucleus1' is used for backward compatibility with DataNucleus v1
    </description>
  </property>
  <property>
    <name>metastore.init.hooks</name>
    <value/>
    <description>
      A comma separated list of hooks to be invoked at the beginning of HMSHandler initialization. 
      An init hook is specified as the name of Java class which extends org.apache.riven.MetaStoreInitListener.
    </description>
  </property>
  <property>
    <name>metastore.initial.metadata.count.enabled</name>
    <value>true</value>
    <description>Enable a metadata count at metastore startup for metrics.</description>
  </property>
  <property>
    <name>metastore.integral.jdo.pushdown</name>
    <value>false</value>
    <description>
      Allow JDO query pushdown for integral partition columns in metastore. Off by default. This
      improves metastore perf for integral columns, especially if there's a large number of partitions.
      However, it doesn't work correctly with integral values that are not normalized (e.g. have
      leading zeroes, like 0012). If metastore direct SQL is enabled and works, this optimization
      is also irrelevant.
    </description>
  </property>
  <property>
    <name>metastore.kerberos.keytab.file</name>
    <value/>
    <description>The path to the Kerberos Keytab file containing the metastore Thrift server's service principal.</description>
  </property>
  <property>
    <name>metastore.kerberos.principal</name>
    <value>hive-metastore/_HOST@EXAMPLE.COM</value>
    <description>
      The service principal for the metastore Thrift server. 
      The special string _HOST will be replaced automatically with the correct host name.
    </description>
  </property>
  <property>
    <name>metastore.limit.partition.request</name>
    <value>-1</value>
    <description>
      This limits the number of partitions (whole partition objects) that can be requested from the metastore for a give table. MetaStore API methods using this are: 
      get_partitions, 
      get_partitions_with_auth, 
      get_partitions_by_filter, 
      get_partitions_by_expr.
      The default value "-1" means no limit.
    </description>
  </property>
  <property>
    <name>metastore.log4j.file</name>
    <value/>
    <description>
      Hive log4j configuration file.
      If the property is not set, then logging will be initialized using metastore-log4j2.properties found on the classpath.
      If the property is set, the value must be a valid URI (java.net.URI, e.g. "file:///tmp/my-logging.xml"), 
      which you can then extract a URL from and pass to PropertyConfigurator.configure(URL).
    </description>
  </property>
  <property>
    <name>javax.jdo.PersistenceManagerFactoryClass</name>
    <value>org.datanucleus.api.jdo.JDOPersistenceManagerFactory</value>
    <description>class implementing the jdo persistence</description>
  </property>
  <property>
    <name>metastore.materializations.invalidation.impl</name>
    <value>DEFAULT</value>
    <description>
      The implementation that we should use for the materializations invalidation cache. 
        DEFAULT: Default implementation for invalidation cache
        DISABLE: Disable invalidation cache (debugging purposes)
    </description>
  </property>
  <property>
    <name>metastore.materializations.invalidation.clean.frequency</name>
    <value>3600s</value>
    <description>Frequency at which timer task runs to remove unnecessary transaction entries frommaterializations invalidation cache.</description>
  </property>
  <property>
    <name>metastore.materializations.invalidation.max.duration</name>
    <value>86400s</value>
    <description>Maximum duration for query producing a materialization. After this time, transactionentries that are not relevant for materializations can be removed from invalidation cache.</description>
  </property>
  <property>
    <name>runtime.stats.clean.frequency</name>
    <value>3600s</value>
    <description>Frequency at which timer task runs to remove outdated runtime stat entries.</description>
  </property>
  <property>
    <name>runtime.stats.max.age</name>
    <value>259200s</value>
    <description>Stat entries which are older than this are removed.</description>
  </property>
  <property>
    <name>metastore.metadata.export.location</name>
    <value/>
    <description>
      When used in conjunction with the org.apache.hadoop.hive.ql.parse.MetaDataExportListener pre event listener, 
      it is the location to which the metadata will be exported. The default is an empty string, which results in the 
      metadata being exported to the current user's home directory on HDFS.
    </description>
  </property>
  <property>
    <name>metastore.metadata.move.exported.metadata.to.trash</name>
    <value>true</value>
    <description>
      When used in conjunction with the org.apache.hadoop.hive.ql.parse.MetaDataExportListener pre event listener, 
      this setting determines if the metadata that is exported will subsequently be moved to the user's trash directory 
      alongside the dropped table data. This ensures that the metadata will be cleaned up along with the dropped table data.
    </description>
  </property>
  <property>
    <name>metastore.metrics.enabled</name>
    <value>false</value>
    <description>Enable metrics on the metastore.</description>
  </property>
  <property>
    <name>metastore.metrics.file.frequency</name>
    <value>1m</value>
    <description>For json metric reporter, the frequency of updating JSON metrics file.</description>
  </property>
  <property>
    <name>metastore.metrics.file.location</name>
    <value>/tmp/report.json</value>
    <description>For metric class json metric reporter, the location of local JSON metrics file.  This file will get overwritten at every interval.</description>
  </property>
  <property>
    <name>metastore.metrics.reporters</name>
    <value>json,jmx</value>
    <description>A comma separated list of metrics reporters to start</description>
  </property>
  <property>
    <name>javax.jdo.option.Multithreaded</name>
    <value>true</value>
    <description>Set this to true if multiple threads access metastore through JDO concurrently.</description>
  </property>
  <property>
    <name>metastore.max.open.txns</name>
    <value>100000</value>
    <description>
      Maximum number of open transactions. If 
      current open transactions reach this limit, future open transaction requests will be 
      rejected, until this number goes below the limit.
    </description>
  </property>
  <property>
    <name>javax.jdo.option.NonTransactionalRead</name>
    <value>true</value>
    <description>Reads outside of transactions</description>
  </property>
  <property>
    <name>metastore.notification.sequence.lock.max.retries</name>
    <value>5</value>
    <description>Number of retries required to acquire a lock when getting the next notification sequential ID for entries in the NOTIFICATION_LOG table.</description>
  </property>
  <property>
    <name>metastore.notification.sequence.lock.retry.sleep.interval</name>
    <value>500ms</value>
    <description>Sleep interval between retries to acquire a notification lock as described part of property NOTIFICATION_SEQUENCE_LOCK_MAX_RETRIES</description>
  </property>
  <property>
    <name>metastore.orm.retrieveMapNullsAsEmptyStrings</name>
    <value>false</value>
    <description>Thrift does not support nulls in maps, so any nulls present in maps retrieved from ORM must either be pruned or converted to empty strings. Some backing dbs such as Oracle persist empty strings as nulls, so we should set this parameter if we wish to reverse that behaviour. For others, pruning is the correct behaviour</description>
  </property>
  <property>
    <name>metastore.partition.name.whitelist.pattern</name>
    <value/>
    <description>Partition names will be checked against this regex pattern and rejected if not matched.</description>
  </property>
  <property>
    <name>metastore.partition.inherit.table.properties</name>
    <value/>
    <description>
      List of comma separated keys occurring in table properties which will get inherited to newly created partitions. 
      * implies all the keys will get inherited.
    </description>
  </property>
  <property>
    <name>metastore.pre.event.listeners</name>
    <value/>
    <description>List of comma separated listeners for metastore events.</description>
  </property>
  <property>
    <name>javax.jdo.option.ConnectionPassword</name>
    <value>admin</value>
    <description>password to use against metastore database</description>
  </property>
  <property>
    <name>metastore.rawstore.impl</name>
    <value>org.apache.hadoop.hive.metastore.ObjectStore</value>
    <description>
      Name of the class that implements org.apache.riven.rawstore interface. 
      This class is used to store and retrieval of raw metadata objects such as table, database
    </description>
  </property>
  <property>
    <name>metastore.repl.cmrootdir</name>
    <value>/user/hive/cmroot/</value>
    <description>Root dir for ChangeManager, used for deleted files.</description>
  </property>
  <property>
    <name>metastore.repl.cm.retain</name>
    <value>24h</value>
    <description>Time to retain removed files in cmrootdir.</description>
  </property>
  <property>
    <name>metastore.repl.cm.interval</name>
    <value>3600s</value>
    <description>Inteval for cmroot cleanup thread.</description>
  </property>
  <property>
    <name>metastore.repl.cm.enabled</name>
    <value>false</value>
    <description>Turn on ChangeManager, so delete files will go to cmrootdir.</description>
  </property>
  <property>
    <name>metastore.repl.rootdir</name>
    <value>/user/hive/repl/</value>
    <description>HDFS root dir for all replication dumps.</description>
  </property>
  <property>
    <name>metastore.repl.copyfile.maxnumfiles</name>
    <value>1</value>
    <description>Maximum number of files Hive uses to do sequential HDFS copies between directories.Distributed copies (distcp) will be used instead for larger numbers of files so that copies can be done faster.</description>
  </property>
  <property>
    <name>metastore.repl.copyfile.maxsize</name>
    <value>33554432</value>
    <description>Maximum file size (in bytes) that Hive uses to do single HDFS copies between directories.Distributed copies (distcp) will be used instead for bigger files so that copies can be done faster.</description>
  </property>
  <property>
    <name>metastore.schema.info.class</name>
    <value>org.apache.hadoop.hive.metastore.MetaStoreSchemaInfo</value>
    <description>
      Fully qualified class name for the metastore schema information class 
      which is used by schematool to fetch the schema information.
       This class should implement the IMetaStoreSchemaInfo interface
    </description>
  </property>
  <property>
    <name>metastore.schema.verification</name>
    <value>true</value>
    <description>
      Enforce metastore schema version consistency.
      True: Verify that version information stored in is compatible with one from Hive jars.  Also disable automatic
            schema migration attempt. Users are required to manually migrate schema after Hive upgrade which ensures
            proper metastore schema migration. (Default)
      False: Warn if the version information stored in metastore doesn't match with one from in Hive jars.
    </description>
  </property>
  <property>
    <name>metastore.schema.verification.record.version</name>
    <value>false</value>
    <description>
      When true the current MS version is recorded in the VERSION table. If this is disabled and verification is
       enabled the MS will be unusable.
    </description>
  </property>
  <property>
    <name>metastore.serdes.using.metastore.for.schema</name>
    <value>org.apache.hadoop.hive.ql.io.orc.OrcSerde,org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe,org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe,org.apache.hadoop.hive.serde2.dynamic_type.DynamicSerDe,org.apache.hadoop.hive.serde2.MetadataTypedColumnsetSerDe,org.apache.hadoop.hive.serde2.columnar.LazyBinaryColumnarSerDe,org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe,org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe</value>
    <description>SerDes retrieving schema from metastore. This is an internal parameter.</description>
  </property>
  <property>
    <name>metastore.server.max.message.size</name>
    <value>104857600</value>
    <description>Maximum message size in bytes a HMS will accept.</description>
  </property>
  <property>
    <name>metastore.server.max.threads</name>
    <value>1000</value>
    <description>Maximum number of worker threads in the Thrift server's pool.</description>
  </property>
  <property>
    <name>metastore.server.min.threads</name>
    <value>200</value>
    <description>Minimum number of worker threads in the Thrift server's pool.</description>
  </property>
  <property>
    <name>metastore.thrift.port</name>
    <value>9083</value>
    <description>Hive metastore listener port</description>
  </property>
  <property>
    <name>metastore.keystore.password</name>
    <value/>
    <description>Metastore SSL certificate keystore password.</description>
  </property>
  <property>
    <name>metastore.keystore.path</name>
    <value/>
    <description>Metastore SSL certificate keystore location.</description>
  </property>
  <property>
    <name>metastore.ssl.protocol.blacklist</name>
    <value>SSLv2,SSLv3</value>
    <description>SSL Versions to disable for all Hive Servers</description>
  </property>
  <property>
    <name>metastore.truststore.path</name>
    <value/>
    <description>Metastore SSL certificate truststore location.</description>
  </property>
  <property>
    <name>metastore.truststore.password</name>
    <value/>
    <description>Metastore SSL certificate truststore password.</description>
  </property>
  <property>
    <name>metastore.stats.autogather</name>
    <value>true</value>
    <description>A flag to gather statistics (only basic) automatically during the INSERT OVERWRITE command.</description>
  </property>
  <property>
    <name>metastore.stats.fetch.bitvector</name>
    <value>false</value>
    <description>Whether we fetch bitvector when we compute ndv. Users can turn it off if they want to use old schema</description>
  </property>
  <property>
    <name>metastore.stats.ndv.tuner</name>
    <value>0.0</value>
    <description>
      Provides a tunable parameter between the lower bound and the higher bound of ndv for aggregate ndv across all the partitions. 
      The lower bound is equal to the maximum of ndv of all the partitions. The higher bound is equal to the sum of ndv of all the partitions.
      Its value should be between 0.0 (i.e., choose lower bound) and 1.0 (i.e., choose higher bound)
    </description>
  </property>
  <property>
    <name>metastore.stats.ndv.densityfunction</name>
    <value>false</value>
    <description>Whether to use density function to estimate the NDV for the whole table based on the NDV of partitions</description>
  </property>
  <property>
    <name>metastore.stats.default.aggregator</name>
    <value/>
    <description>The Java class (implementing the StatsAggregator interface) that is used by default if hive.stats.dbclass is custom type.</description>
  </property>
  <property>
    <name>metastore.stats.default.publisher</name>
    <value/>
    <description>The Java class (implementing the StatsPublisher interface) that is used by default if hive.stats.dbclass is custom type.</description>
  </property>
  <property>
    <name>metastore.stats.auto.analyze</name>
    <value>none</value>
    <description>Whether to update stats in the background; none - no, all - for all tables, existing - only existing, out of date, stats.</description>
  </property>
  <property>
    <name>metastore.stats.auto.analyze.noop.wait</name>
    <value>5m</value>
    <description>
      How long to sleep if there were no stats needing update during an update iteration.
      This is a setting to throttle table/partition checks when nothing is being changed; not
      the analyze queries themselves.
    </description>
  </property>
  <property>
    <name>metastore.stats.auto.analyze.worker.count</name>
    <value>1</value>
    <description>Number of parallel analyze commands to run for background stats update.</description>
  </property>
  <property>
    <name>metastore.storage.schema.reader.impl</name>
    <value>org.apache.hadoop.hive.metastore.DefaultStorageSchemaReader</value>
    <description>The class to use to read schemas from storage.  It must implement org.apache.hadoop.hive.metastore.StorageSchemaReader</description>
  </property>
  <property>
    <name>datanucleus.storeManagerType</name>
    <value>rdbms</value>
    <description>metadata store type</description>
  </property>
  <property>
    <name>metastore.strict.managed.tables</name>
    <value>false</value>
    <description>Whether strict managed tables mode is enabled. With this mode enabled, only transactional tables (both full and insert-only) are allowed to be created as managed tables</description>
  </property>
  <property>
    <name>metastore.support.special.characters.tablename</name>
    <value>true</value>
    <description>
      This flag should be set to true to enable support for special characters in table names.
      When it is set to false, only [a-zA-Z_0-9]+ are supported.
      The only supported special character right now is '/'. This flag applies only to quoted table names.
      The default value is true.
    </description>
  </property>
  <property>
    <name>metastore.task.threads.always</name>
    <value>org.apache.hadoop.hive.metastore.events.EventCleanerTask,org.apache.hadoop.hive.metastore.RuntimeStatsCleanerTask,org.apache.hadoop.hive.metastore.repl.DumpDirCleanerTask</value>
    <description>Comma separated list of tasks that will be started in separate threads.  These will always be started, regardless of whether the metastore is running in embedded mode or in server mode.  They must implement org.apache.hadoop.hive.metastore.MetastoreTaskThread</description>
  </property>
  <property>
    <name>metastore.task.threads.remote</name>
    <value>org.apache.hadoop.hive.metastore.txn.AcidHouseKeeperService,org.apache.hadoop.hive.metastore.txn.AcidOpenTxnsCounterService,org.apache.hadoop.hive.metastore.txn.AcidCompactionHistoryService,org.apache.hadoop.hive.metastore.txn.AcidWriteSetService,org.apache.hadoop.hive.metastore.MaterializationsRebuildLockCleanerTask</value>
    <description>Command separated list of tasks that will be started in separate threads.  These will be started only when the metastore is running as a separate service.  They must implement org.apache.hadoop.hive.metastore.MetastoreTaskThread</description>
  </property>
  <property>
    <name>metastore.server.tcp.keepalive</name>
    <value>true</value>
    <description>Whether to enable TCP keepalive for the metastore server. Keepalive will prevent accumulation of half-open connections.</description>
  </property>
  <property>
    <name>metastore.thread.pool.size</name>
    <value>10</value>
    <description>Number of threads in the thread pool.  These will be used to execute all background processes.</description>
  </property>
  <property>
    <name>metastore.connect.retries</name>
    <value>3</value>
    <description>Number of retries while opening a connection to metastore</description>
  </property>
  <property>
    <name>metastore.failure.retries</name>
    <value>1</value>
    <description>Number of retries upon failure of Thrift metastore calls</description>
  </property>
  <property>
    <name>metastore.thrift.uris</name>
    <value>thrift://localhost:9083</value>
    <description>Thrift URI for the remote metastore. Used by metastore client to connect to remote metastore.</description>
  </property>
  <property>
    <name>metastore.thrift.uri.selection</name>
    <value>RANDOM</value>
    <description>Determines the selection mechanism used by metastore client to connect to remote metastore.  SEQUENTIAL implies that the first valid metastore from the URIs specified as part of hive.metastore.uris will be picked.  RANDOM implies that the metastore will be picked randomly</description>
  </property>
  <property>
    <name>metastore.timedout.txn.reaper.start</name>
    <value>100s</value>
    <description>Time delay of 1st reaper run after metastore start</description>
  </property>
  <property>
    <name>metastore.timedout.txn.reaper.interval</name>
    <value>180s</value>
    <description>Time interval describing how often the reaper runs</description>
  </property>
  <property>
    <name>metastore.token.signature</name>
    <value/>
    <description>The delegation token service name to match when selecting a token from the current user's tokens.</description>
  </property>
  <property>
    <name>metastore.transactional.event.listeners</name>
    <value/>
    <description>A comma separated list of Java classes that implement the org.apache.riven.MetaStoreEventListener interface. Both the metastore event and corresponding listener method will be invoked in the same JDO transaction.</description>
  </property>
  <property>
    <name>metastore.try.direct.sql</name>
    <value>true</value>
    <description>
      Whether the metastore should try to use direct SQL queries instead of the
      DataNucleus for certain read paths. This can improve metastore performance when
      fetching many partitions or column statistics by orders of magnitude; however, it
      is not guaranteed to work on all RDBMS-es and all versions. In case of SQL failures,
      the metastore will fall back to the DataNucleus, so it's safe even if SQL doesn't
      work for all queries on your datastore. If all SQL queries fail (for example, your
      metastore is backed by MongoDB), you might want to disable this to save the
      try-and-fall-back cost.
    </description>
  </property>
  <property>
    <name>metastore.try.direct.sql.ddl</name>
    <value>true</value>
    <description>
      Same as hive.metastore.try.direct.sql, for read statements within a transaction that
      modifies metastore data. Due to non-standard behavior in Postgres, if a direct SQL
      select query has incorrect syntax or something similar inside a transaction, the
      entire transaction will fail and fall-back to DataNucleus will not be possible. You
      should disable the usage of direct SQL inside transactions if that happens in your case.
    </description>
  </property>
  <property>
    <name>metastore.txn.max.open.batch</name>
    <value>1000</value>
    <description>
      Maximum number of transactions that can be fetched in one call to open_txns().
      This controls how many transactions streaming agents such as Flume or Storm open
      simultaneously. The streaming agent then writes that number of entries into a single
      file (per Flume agent or Storm bolt). Thus increasing this value decreases the number
      of delta files created by streaming agents. But it also increases the number of open
      transactions that Hive has to track at any given time, which may negatively affect
      read performance.
    </description>
  </property>
  <property>
    <name>metastore.txn.retryable.sqlex.regex</name>
    <value/>
    <description>
      Comma separated list
      of regular expression patterns for SQL state, error code, and error message of
      retryable SQLExceptions, that's suitable for the metastore DB.
      For example: Can't serialize.*,40001$,^Deadlock,.*ORA-08176.*
      The string that the regex will be matched against is of the following form, where ex is a SQLException:
      ex.getMessage() + " (SQLState=" + ex.getSQLState() + ", ErrorCode=" + ex.getErrorCode() + ")"
    </description>
  </property>
  <property>
    <name>metastore.txn.store.impl</name>
    <value>org.apache.hadoop.hive.metastore.txn.CompactionTxnHandler</value>
    <description>Name of class that implements org.apache.riven.txn.TxnStore.  This class is used to store and retrieve transactions and locks</description>
  </property>
  <property>
    <name>metastore.txn.timeout</name>
    <value>300s</value>
    <description>time after which transactions are declared aborted if the client has not sent a heartbeat.</description>
  </property>
  <property>
    <name>metastore.uri.resolver</name>
    <value/>
    <description>If set, fully qualified class name of resolver for hive metastore uri's</description>
  </property>
  <property>
    <name>metastore.users.in.admin.role</name>
    <value/>
    <description>
      Comma separated list of users who are in admin role for bootstrapping.
      More users can be added in ADMIN role later.
    </description>
  </property>
  <property>
    <name>metastore.use.SSL</name>
    <value>false</value>
    <description>Set this to true for using SSL encryption in HMS server.</description>
  </property>
  <property>
    <name>metastore.sasl.enabled</name>
    <value>false</value>
    <description>If true, the metastore Thrift interface will be secured with SASL. Clients must authenticate with Kerberos.</description>
  </property>
  <property>
    <name>metastore.thrift.framed.transport.enabled</name>
    <value>false</value>
    <description>If true, the metastore Thrift interface will use TFramedTransport. When false (default) a standard TTransport is used.</description>
  </property>
  <property>
    <name>metastore.thrift.compact.protocol.enabled</name>
    <value>false</value>
    <description>
      If true, the metastore Thrift interface will use TCompactProtocol. When false (default) TBinaryProtocol will be used.
      Setting it to true will break compatibility with older clients running TBinaryProtocol.
    </description>
  </property>
  <property>
    <name>datanucleus.schema.validateColumns</name>
    <value>false</value>
    <description>validates existing schema against code. turn this on if you want to verify existing schema</description>
  </property>
  <property>
    <name>datanucleus.schema.validateConstraints</name>
    <value>false</value>
    <description>validates existing schema against code. turn this on if you want to verify existing schema</description>
  </property>
  <property>
    <name>datanucleus.schema.validateTables</name>
    <value>false</value>
    <description>validates existing schema against code. turn this on if you want to verify existing schema</description>
  </property>
  <property>
    <name>metastore.warehouse.dir</name>
    <value>/user/hive/warehouse</value>
    <description>location of default database for the warehouse</description>
  </property>
  <property>
    <name>metastore.warehouse.external.dir</name>
    <value/>
    <description>Default location for external tables created in the warehouse. If not set or null, then the normal warehouse location will be used as the default location.</description>
  </property>
  <property>
    <name>metastore.writeset.reaper.interval</name>
    <value>60s</value>
    <description>Frequency of WriteSet reaper runs</description>
  </property>
  <property>
    <name>metastore.wm.default.pool.size</name>
    <value>4</value>
    <description>
      The size of a default pool to create when creating an empty resource plan;
      If not positive, no default pool will be created.
    </description>
  </property>
  <property>
    <name>hive.in.test</name>
    <value>false</value>
    <description>internal usage only, true in test mode</description>
  </property>
  <property>
    <name>hive.in.tez.test</name>
    <value>false</value>
    <description>internal use only, true when in testing tez</description>
  </property>
  <property>
    <name>hive.security.authorization.manager</name>
    <value>org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory</value>
    <description>
      The Hive client authorization manager class name. The user defined authorization class should implement 
      interface org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider.
    </description>
  </property>
  <property>
    <name>hive.security.metastore.authenticator.manager</name>
    <value>org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator</value>
    <description>
      authenticator manager class name to be used in the metastore for authentication. 
      The user defined authenticator should implement interface org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider.
    </description>
  </property>
  <property>
    <name>hive.security.metastore.authorization.auth.reads</name>
    <value>true</value>
    <description>If this is true, metastore authorizer authorizes read actions on database, table</description>
  </property>
  <property>
    <name>hive.txn.manager</name>
    <value>org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager</value>
    <description>
      Set to org.apache.hadoop.hive.ql.lockmgr.DbTxnManager as part of turning on Hive
      transactions, which also requires appropriate settings for hive.compactor.initiator.on,
      hive.compactor.worker.threads, hive.support.concurrency (true),
      and hive.exec.dynamic.partition.mode (nonstrict).
      The default DummyTxnManager replicates pre-Hive-0.13 behavior and provides
      no transactions.
    </description>
  </property>
  <property>
    <name>hive.support.concurrency</name>
    <value>false</value>
    <description>
      Whether Hive supports concurrency control or not. 
      A ZooKeeper instance must be up and running when using zookeeper Hive lock manager 
    </description>
  </property>
  <property>
    <name>hive.service.metrics.codahale.reporter.classes</name>
    <value/>
    <description>Use METRICS_REPORTERS instead.  Comma separated list of reporter implementation classes for metric class org.apache.hadoop.hive.common.metrics.metrics2.CodahaleMetrics. Overrides HIVE_METRICS_REPORTER conf if present.  This will be overridden by METRICS_REPORTERS if it is present</description>
  </property>
  <property>
    <name>hive.service.metrics.reporter</name>
    <value/>
    <description>Reporter implementations for metric class org.apache.hadoop.hive.common.metrics.metrics2.CodahaleMetrics;Deprecated, use METRICS_REPORTERS instead. This configuraiton will be overridden by HIVE_CODAHALE_METRICS_REPORTER_CLASSES and METRICS_REPORTERS if present. Comma separated list of JMX, CONSOLE, JSON_FILE, HADOOP2</description>
  </property>
  <property>
    <name>test.str</name>
    <value>defaultval</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.str.set</name>
    <value>a</value>
    <description/>
  </property>
  <property>
    <name>test.str.list</name>
    <value>a,b,c</value>
    <description>no comment</description>
  </property>
  <property>
    <name>test.long</name>
    <value>42</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.double</name>
    <value>3.141592654</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.time</name>
    <value>1s</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.time.validator.inclusive</name>
    <value>1s</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.time.validator.exclusive</name>
    <value>1s</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.bool</name>
    <value>true</value>
    <description>comment</description>
  </property>
  <property>
    <name>test.class</name>
    <value/>
    <description>comment</description>
  </property>
</configuration>
